#!/usr/bin/env python3

import sys, os
from subprocess import PIPE, Popen
from os.path import join, isdir, abspath

def call(cmd): # cmd: list[str]
    out, err = Popen(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True) \
        .communicate()
    return out, err

def current_branch():
    o, e = call(["git", "symbolic-ref", "--short", "HEAD"])
    if e:
        return None, e
    return o.split("\n")[0], None # should be one line of output

def has_dot_git(path):
    dot_git = join(path, ".git/")
    return isdir(dot_git)

def has_remotes(path):
    o, e = call(["git", "-C", path, "remote"])
    return not bool(e) and any(x for x in o.split("\n"))

def is_up_to_date(branch):
    cmd = ["git", "log", "origin/%s..%s" % (branch, branch), "--pretty=oneline"]
    o, e = call(cmd)
    diff = len(o.splitlines())
    return (None,      None, str(e)) if e else\
           (diff == 0, diff, None)

dirs = filter(has_remotes,
       filter(has_dot_git,
       filter(isdir,
       os.listdir("."))))

cwd = abspath(os.getcwd())

CSI = "\x1B["
RESET = CSI + "0m"
FG, BG = 30, 40
BLACK, RED, GREEN, YELLOW = range(0, 4)

def term_color(f, b, st): return CSI + "%d;%dm%s" % (FG + f, BG + b, st) + RESET
def term_err(st):   return term_color(RED, BLACK, st)
def term_ok(st):    return term_color(BLACK, GREEN, st)
def term_warn(st):  return term_color(BLACK, YELLOW, st)

def dir_status(d):
    os.chdir(d)
    branch, err_b = current_branch()
    up_to_date, diff, err_u = is_up_to_date(branch)
    os.chdir(cwd)

    err = err_b or err_u

    if err:          stat = term_err("error")
    elif up_to_date: stat = term_ok("Up-to-date")
    else:            stat = term_warn("%d diff" % diff)

    line = "%s (%s) " % (d, branch)
    return line, stat, err, up_to_date

def filter_for_args(all_flag=False, skip_error=False):
    def p(dir_status):
        _, _, err, up_to_date = dir_status
        # by default we show errors and hide up to date repos
        # TODO: surely there's a more obtuse boolean incantation
        if all_flag: return True
        if skip_error and err: return False
        return err or not up_to_date
    return p

all_flag = any(x in sys.argv for x in ["--all", "-a"])
skip_error = any(x in sys.argv for x in ["--skip-error", "-s"])

statuses = list(
    filter(filter_for_args(all_flag, skip_error),
    map(dir_status,
    dirs)))

max_len = max(
    map(len,
    map(lambda x: x[0],
    statuses)))

def update(tup, idx, f):
    l = list(tup)
    l[idx] = f(l[idx])
    return tuple(l)

padded = map(lambda x: update(x, 0, lambda x: x.ljust(max_len)), statuses)

for s in padded:
    line, stat, _, _ = s
    print(line, stat)
